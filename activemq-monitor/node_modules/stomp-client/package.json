{
  "author": {
    "name": "Ben Marvell"
  },
  "contributors": [
    {
      "name": "Ben Marvell",
      "email": "ben@marvell-consulting.com"
    },
    {
      "name": "Ryan Grenz",
      "email": "info@ryangrenz.com"
    }
  ],
  "name": "stomp-client",
  "description": "A STOMP protocol implementation in node.js",
  "version": "0.7.0",
  "repository": {
    "url": "http://github.com/easternbloc/node-stomp-client"
  },
  "main": "lib/client.js",
  "engines": {
    "node": ">= 0.10"
  },
  "dependencies": {},
  "devDependencies": {
    "nodeunit": "0.7.4",
    "jshint": "2.4.3"
  },
  "license": "MIT",
  "keywords": [
    "stomp",
    "messaging"
  ],
  "scripts": {
    "test": "nodeunit test",
    "lint": "[ -z \"$LINTFILES\" ] && LINTFILES='**'; ./node_modules/jshint/bin/jshint ${LINTFILES}"
  },
  "readme": "Stomp Client\n===========\n\n[![Build Status](https://img.shields.io/travis/easternbloc/node-stomp-client.svg?style=flat-square)](http://travis-ci.org/easternbloc/node-stomp-client)\n[![Monthly Downloads](https://img.shields.io/npm/dm/stomp-client.svg?style=flat-square)](https://www.npmjs.com/package/stomp-client)\n[![Version](https://img.shields.io/npm/v/stomp-client.svg?style=flat-square)](https://www.npmjs.com/package/stomp-client)\n[![Licence](https://img.shields.io/npm/l/stomp-client.svg?style=flat-square)](https://github.com/easternbloc/node-stomp-client/blob/master/LICENSE)\n\nA node.js [STOMP](http://stomp.github.com) client. Props goes to [Russell\nHaering](https://github.com/russellhaering/node-stomp-broker) for doing the\ninitial legwork.\n\nThe following enhancements have been added:\n\n*   Unit tests\n*   Ability to support different protocol versions (1.0 or 1.1) - more work needed\n*   Inbound frame validation (required / regex'able header values)\n*   Support for UNSUBSCRIBE frames in client\n*   Ability to add custom headers to SUBSCRIBE/UNSUBSCRIBE frames\n*   ACK and NACK support\n\n## Installation\n\n\tnpm install stomp-client\n\n## Super basic example\n\n    var Stomp = require('stomp-client');\n    var destination = '/queue/someQueueName';\n    var client = new Stomp('127.0.0.1', 61613, 'user', 'pass');\n\n    client.connect(function(sessionId) {\n        client.subscribe(destination, function(body, headers) {\n          console.log('This is the body of a message on the subscribed queue:', body);\n        });\n\n        client.publish(destination, 'Oh herrow');\n    });\n\nThe client comes in two forms, a standard or secure client. The example below is\nusing the standard client. To use the secure client simply change\n`StompClient` to `SecureStompClient`\n\n\n# API\n\n## Queue Names\n\nThe meaning of queue names is not defined by the STOMP spec, but by the Broker.\nHowever, with ActiveMQ, they should begin with `\"/queue/\"` or with `\"/topic/\"`, see\n[STOMP1.0](http://stomp.github.io/stomp-specification-1.0.html#frame-SEND) for\nmore detail.\n\n## Stomp = require('stomp-client')\n\nRequire returns a constructor for STOMP client instances.\n\nFor backwards compatibility, `require('stomp-client').StompClient` is also\nsupported.\n\n## Stomp(address, [port], [user], [pass], [protocolVersion], [vhost], [reconnectOpts], [tls])\n\n- `address`: address to connect to, default is `\"127.0.0.1\"`\n- `port`: port to connect to, default is `61613`\n- `user`: user to authenticate as, default is `\"\"`\n- `pass`: password to authenticate with, default is `\"\"`\n- `protocolVersion`: see below, defaults to `\"1.0\"`\n- `vhost`: see below, defaults to `null`\n- `reconnectOpts`: see below, defaults to `{}`\n- `tls`: Establish a tls/ssl connection.  If an object is passed for this argument it will passed as options to the tls module.\n\nProtocol version negotiation is not currently supported and version `\"1.0\"` is\nthe only supported version.\n\nReconnectOpts should contain an integer `retries` specifying the maximum number\nof reconnection attempts, and a `delay` which specifies the reconnection delay.\n (reconnection timings are calculated using exponential backoff. The first reconnection\n happens immediately, the second reconnection happens at `+delay` ms, the third at `+ 2*delay` ms, etc).\n\n## Stomp(options)\n\n- `options`: Properties are named the same as the positional parameters above. The property 'host' is accepted as an alias for 'address'.\n\n## stomp.connect([callback, [errorCallback]])\n\nConnect to the STOMP server. If the callbacks are provided, they will be\nattached on the `'connect'` and `'error'` event, respectively.\n\n## virtualhosts\n\nIf using virtualhosts to namespace your queues, you must pass a `version` header of '1.1' otherwise it is ignored.\n\n## stomp.disconnect(callback)\n\nDisconnect from the STOMP server. The callback will be executed when disconnection is complete.\nNo reconnections should be attempted, nor errors thrown as a result of this call.\n\n## stomp.subscribe(queue, [headers,] callback)\n\n- `queue`: queue to subscribe to\n- `headers`: headers to add to the SUBSCRIBE message\n- `callback`: will be called with message body as first argument,\n  and header object as the second argument\n\n## stomp.unsubscribe(queue, [headers])\n\n- `queue`: queue to unsubscribe from\n- `headers`: headers to add to the UNSUBSCRIBE message\n\n## stomp.publish(queue, message, [headers])\n\n- `queue`: queue to publish to\n- `message`: message to publish, a string or buffer\n- `headers`: headers to add to the PUBLISH message\n\n## stomp.ack(messageId, subscription, [transaction]),\n## stomp.nack(messageId, subscription, [transaction])\n\n- `messageId`: the id of the message to ack/nack\n- `subscription`: the id of the subscription\n- `transaction`: optional transaction name\n\n## Property: `stomp.publishable` (boolean)\nReturns whether or not the connection is currently writable. During normal operation\nthis should be true, however if the client is in the process of reconnecting,\nthis will be false.\n\n## Event: `'connect'`\n\nEmitted on successful connect to the STOMP server.\n\n## Event: `'error'`\n\nEmitted on an error at either the TCP or STOMP protocol layer. An Error object\nwill be passed. All error objects have a `.message` property, STOMP protocol\nerrors may also have a `.details` property.\n\nIf the error was caused by a failure to reconnect after exceeding the number of\nreconnection attempts, the error object will have a `reconnectionFailed` property.\n\n## Event: `'reconnect'`\n\nEmitted when the client has successfully reconnected. The event arguments are\nthe new `sessionId` and the reconnection attempt number.\n\n## Event: `'reconnecting'`\n\nEmitted when the client has been disconnected for whatever reason, but is going\nto attempt to reconnect.\n\n## LICENSE\n\n[MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/easternbloc/node-stomp-client/issues"
  },
  "_id": "stomp-client@0.7.0",
  "_from": "stomp-client@"
}
